To create a system where users can create teams, send requests to add members, and join existing teams, here's a possible approach to implement it in your application. This would involve setting up endpoints and logic for both "Create Teams" and "Join Teams" pages, as well as ensuring that the team schema is managed properly.

Below are the necessary steps and code to get you started:

### Step 1: Define Routes for Create Team and Join Team

Create two routes in your Express application, one for creating a team and one for joining an existing team. You'll also need to fetch the `eventId` from the URL and handle the logic based on the conditions you've provided.

#### 1.1 Create Team Route

```js
// teamRoutes.js

const express = require('express');
const router = express.Router();
const Team = require('../models/team');
const Signup = require('../models/signup');
const { isLoggedIn } = require('../middleware/auth'); // Middleware to check if user is logged in

// Route to create a team
router.post('/create', isLoggedIn, async (req, res) => {
    const { teamName, eventId, projectName, mentorId } = req.body;

    try {
        // Create the new team
        const newTeam = new Team({
            name: teamName,
            team_id: Math.floor(Math.random() * 10000), // Random team ID or you can have an auto-increment logic
            project: projectName,
            project_id: eventId, // From URL params
            mentor: mentorId,
            status: "active",
            isFull: false,
            eventId: eventId,
            createdAt: new Date(),
        });

        // Add the team leader (logged-in user)
        newTeam.members.push({
            status: 'leader', 
            user_id: req.user._id
        });

        // Save the new team
        await newTeam.save();

        // Update the user's signup document with the team details
        await Signup.findByIdAndUpdate(req.user._id, {
            team: teamName,
            teamId: newTeam.team_id,
            isTeam: true
        });

        res.status(201).json({ message: 'Team created successfully', team: newTeam });
    } catch (error) {
        res.status(500).json({ message: 'Failed to create team', error });
    }
});
```

#### 1.2 Join Team Route

```js
// teamRoutes.js

// Route to join a team
router.post('/join/:teamId', isLoggedIn, async (req, res) => {
    const { teamId } = req.params;

    try {
        // Find the team by ID
        const team = await Team.findOne({ team_id: teamId });

        if (!team || team.isFull) {
            return res.status(400).json({ message: 'Team is either full or does not exist' });
        }

        // Check if the team already has 4 members
        if (team.members.length >= 4) {
            return res.status(400).json({ message: 'Team is full' });
        }

        // Add user to team requests
        team.requests.push({
            user_id: req.user._id,
            status: 'pending',
        });

        // Save the updated team
        await team.save();

        // Update the user's signup document with pending request
        const user = await Signup.findById(req.user._id);
        user.requests.push({
            teamId: team.team_id,
            teamName: team.name,
            status: 'pending'
        });
        await user.save();

        res.status(200).json({ message: 'Request to join the team sent' });
    } catch (error) {
        res.status(500).json({ message: 'Error while sending request', error });
    }
});
```

#### 1.3 Accept/Reject Request by Team Leader

```js
// teamRoutes.js

// Route for team leader to accept/reject request
router.post('/request/:teamId/:userId', isLoggedIn, async (req, res) => {
    const { teamId, userId } = req.params;
    const { action } = req.body; // "accept" or "reject"

    try {
        // Find the team by ID
        const team = await Team.findOne({ team_id: teamId });

        if (!team) {
            return res.status(404).json({ message: 'Team not found' });
        }

        // Check if the logged-in user is the team leader
        if (team.members[0].user_id.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: 'Only the team leader can approve/reject requests' });
        }

        // Find the request to accept/reject
        const requestIndex = team.requests.findIndex(request => request.user_id.toString() === userId);

        if (requestIndex === -1) {
            return res.status(404).json({ message: 'Request not found' });
        }

        // Accept or reject the request
        if (action === 'accept') {
            team.members.push({
                status: 'member',
                user_id: userId
            });
            team.requests[requestIndex].status = 'approved';
        } else if (action === 'reject') {
            team.requests[requestIndex].status = 'rejected';
        }

        // Save the updated team
        await team.save();

        // Update the user's signup document
        const user = await Signup.findById(userId);
        if (action === 'accept') {
            user.team = team.name;
            user.teamId = team.team_id;
            user.isTeam = true;
        }
        await user.save();

        res.status(200).json({ message: `Request ${action}ed successfully` });
    } catch (error) {
        res.status(500).json({ message: 'Error while processing request', error });
    }
});
```

### Step 2: Frontend (Example)

Here's a simple front-end form to handle creating and joining teams. You can use React for the UI.

```jsx
// CreateTeam.js

import React, { useState } from 'react';

const CreateTeam = () => {
  const [teamName, setTeamName] = useState('');
  const [eventId, setEventId] = useState('');
  const [projectName, setProjectName] = useState('');
  const [mentorId, setMentorId] = useState('');

  const handleCreateTeam = async () => {
    const response = await fetch('/api/team/create', {
      method: 'POST',
      body: JSON.stringify({ teamName, eventId, projectName, mentorId }),
      headers: { 'Content-Type': 'application/json' },
    });
    const data = await response.json();
    if (data.message === 'Team created successfully') {
      // Handle success (navigate to the team page, etc.)
    } else {
      // Handle error
    }
  };

  return (
    <div>
      <input type="text" placeholder="Team Name" onChange={(e) => setTeamName(e.target.value)} />
      <input type="text" placeholder="Event ID" onChange={(e) => setEventId(e.target.value)} />
      <input type="text" placeholder="Project Name" onChange={(e) => setProjectName(e.target.value)} />
      <input type="text" placeholder="Mentor ID" onChange={(e) => setMentorId(e.target.value)} />
      <button onClick={handleCreateTeam}>Create Team</button>
    </div>
  );
};

export default CreateTeam;
```

### Step 3: Additional Considerations

1. **Authentication and Authorization**: Use middleware to ensure that users are logged in before accessing routes.
2. **Team Full Status**: When a team reaches 4 members, set `isFull: true` and prevent further requests.
3. **UI for Requests**: Create a page where users can see pending requests and send them for team leaders to approve.
4. **Notifications/Emails**: Consider adding notifications to inform users when they are added to a team or when their request is approved/rejected.

This should help you build the functionality for creating and joining teams while handling member requests and updates to the `team` and `signup` documents.
